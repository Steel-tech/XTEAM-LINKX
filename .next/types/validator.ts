// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/admin/crews/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/crews">> = Specific
  const handler = {} as typeof import("../../src/app/admin/crews/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../src/app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/calendar/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/calendar">> = Specific
  const handler = {} as typeof import("../../src/app/calendar/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/job/[id]/blueprints/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/job/[id]/blueprints">> = Specific
  const handler = {} as typeof import("../../src/app/job/[id]/blueprints/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/job/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/job/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/job/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/job/[id]/reports/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/job/[id]/reports">> = Specific
  const handler = {} as typeof import("../../src/app/job/[id]/reports/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/jobs/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/jobs">> = Specific
  const handler = {} as typeof import("../../src/app/jobs/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/messages/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/messages">> = Specific
  const handler = {} as typeof import("../../src/app/messages/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/time-clock/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/time-clock">> = Specific
  const handler = {} as typeof import("../../src/app/time-clock/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/unauthorized/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/unauthorized">> = Specific
  const handler = {} as typeof import("../../src/app/unauthorized/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/admin/jobs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/admin/jobs">> = Specific
  const handler = {} as typeof import("../../src/app/api/admin/jobs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/[...nextauth]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...nextauth]">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/[...nextauth]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blueprints/[id]/markup/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blueprints/[id]/markup">> = Specific
  const handler = {} as typeof import("../../src/app/api/blueprints/[id]/markup/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blueprints/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blueprints/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/blueprints/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/calendar/events/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/calendar/events">> = Specific
  const handler = {} as typeof import("../../src/app/api/calendar/events/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/calendar/jobs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/calendar/jobs">> = Specific
  const handler = {} as typeof import("../../src/app/api/calendar/jobs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/calendar/reminders/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/calendar/reminders">> = Specific
  const handler = {} as typeof import("../../src/app/api/calendar/reminders/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/crews/assign/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/crews/assign">> = Specific
  const handler = {} as typeof import("../../src/app/api/crews/assign/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/crews/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/crews">> = Specific
  const handler = {} as typeof import("../../src/app/api/crews/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/health/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/health">> = Specific
  const handler = {} as typeof import("../../src/app/api/health/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/jobs/active/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/jobs/active">> = Specific
  const handler = {} as typeof import("../../src/app/api/jobs/active/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/jobs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/jobs">> = Specific
  const handler = {} as typeof import("../../src/app/api/jobs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/jobs/select/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/jobs/select">> = Specific
  const handler = {} as typeof import("../../src/app/api/jobs/select/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/messages/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/messages">> = Specific
  const handler = {} as typeof import("../../src/app/api/messages/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/messages/typing/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/messages/typing">> = Specific
  const handler = {} as typeof import("../../src/app/api/messages/typing/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/reports/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports">> = Specific
  const handler = {} as typeof import("../../src/app/api/reports/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/reports/templates/[templateId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports/templates/[templateId]">> = Specific
  const handler = {} as typeof import("../../src/app/api/reports/templates/[templateId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/reports/templates/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports/templates">> = Specific
  const handler = {} as typeof import("../../src/app/api/reports/templates/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/time/clock/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/time/clock">> = Specific
  const handler = {} as typeof import("../../src/app/api/time/clock/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/time/entries/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/time/entries">> = Specific
  const handler = {} as typeof import("../../src/app/api/time/entries/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/ws/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/ws">> = Specific
  const handler = {} as typeof import("../../src/app/api/ws/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
