// Prisma schema file
// learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User authentication models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("FIELD") // FIELD, SHOP, FOREMAN, PM, ADMIN
  location      String?   // Current location for tracking
  accounts      Account[]
  sessions      Session[]

  // Messaging relationships
  sentMessages     Message[] @relation("MessageSender")
  jobMemberships   JobMember[]

  // Crew relationships
  crewMemberships  CrewMember[]
  foremanCrews     Crew[]    @relation("CrewForeman")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Field operations relations
  timeEntries     TimeEntry[]
  reports         Report[]
  blueprintMarkups BlueprintMarkup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Job management models - Combined from both features
model Job {
  id          String    @id @default(cuid())
  name        String    // Job name/title
  title       String?   // Display title
  client      String    // Client name
  description String?
  location    String?
  status      String    @default("ACTIVE") // ACTIVE, COMPLETE, ON_HOLD
  priority    String    @default("medium") // low, medium, high, urgent
  startDate   DateTime?
  endDate     DateTime?

  // Relationships from both features
  members     JobMember[]
  messages    Message[]
  crews       CrewAssignment[]
  events      CalendarEvent[]
  timeEntries TimeEntry[]
  reports     Report[]
  blueprints  Blueprint[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model JobMember {
  id     String @id @default(cuid())
  jobId  String
  userId String
  role   String @default("member") // admin, supervisor, member

  // Relationships
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([jobId, userId])
}

// Field Operations models
model TimeEntry {
  id        String    @id @default(cuid())
  userId    String
  jobId     String
  location  String // "FIELD" or "SHOP"
  clockIn   DateTime
  clockOut  DateTime?
  duration  Int?      // minutes
  notes     String?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Report {
  id          String     @id @default(cuid())
  jobId       String
  userId      String
  type        String     // "INSPECTION", "NCR", "SAFETY", "PROGRESS", "INCIDENT"
  title       String
  content     String
  attachments String     @default("[]") // JSON array of file URLs
  status      String     @default("DRAFT") // "DRAFT", "SUBMITTED", "REVIEWED", "APPROVED"
  submittedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blueprint {
  id          String           @id @default(cuid())
  jobId       String
  name        String
  description String?
  fileUrl     String
  mimeType    String?          // image/jpeg, image/png, application/pdf
  fileSize    Int?             // file size in bytes
  markups     String           @default("[]") // JSON array of markup data
  version     Int              @default(1)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  markupSaves BlueprintMarkup[]
}

model BlueprintMarkup {
  id          String    @id @default(cuid())
  blueprintId String
  userId      String?
  name        String
  markupData  String    // JSON string containing markup elements
  description String?
  isShared    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  blueprint   Blueprint @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([blueprintId])
  @@index([userId])
}

// Communication & Coordination models
model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // text, image, file, system

  // Relationships
  senderId  String
  sender    User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  jobId     String?
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  // Message status
  isEdited  Boolean  @default(false)
  editedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobId, createdAt])
  @@index([senderId])
}

// Crew management models
model Crew {
  id         String   @id @default(cuid())
  name       String
  type       String   // FIELD or SHOP
  foremanId  String?
  active     Boolean  @default(true)

  // Relationships
  foreman    User?    @relation("CrewForeman", fields: [foremanId], references: [id])
  members    CrewMember[]
  assignments CrewAssignment[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CrewMember {
  id     String @id @default(cuid())
  crewId String
  userId String
  active Boolean @default(true)

  // Relationships
  crew   Crew   @relation(fields: [crewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([crewId, userId])
}

model CrewAssignment {
  id         String   @id @default(cuid())
  jobId      String
  crewId     String
  location   String   // FIELD or SHOP
  active     Boolean  @default(true)
  assignedAt DateTime @default(now())

  // Relationships
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  crew       Crew     @relation(fields: [crewId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([jobId, crewId])
}

// Calendar and scheduling models
model CalendarEvent {
  id         String   @id @default(cuid())
  jobId      String
  title      String
  description String?
  date       DateTime
  type       String   // MEETING, INSPECTION, DEADLINE, TASK
  attendees  String   // JSON array of user IDs
  reminder   Boolean  @default(false)
  allDay     Boolean  @default(false)

  // Relationships
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([jobId, date])
  @@index([date])
}

// SQLite compatibility notes:
// - Enums replaced with String fields with comments indicating valid values
// - Array fields replaced with JSON strings
// - All relationships maintained for proper data integrity